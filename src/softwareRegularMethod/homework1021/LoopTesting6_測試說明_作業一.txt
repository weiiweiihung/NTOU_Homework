程式碼:
@Test
	public void test1() {
		String [] strArrPhoneNumber = null;
		String msg = new LoopTesting6_phone().checkPhone(strArrPhoneNumber);
		System.out.println(msg);
		assertEquals(LoopTesting6_Common.ERR_NULL.getContent(), msg);
	}
test case 1 (測試案例 1)
1) Input values(測試時候需要 控制資料的值): strArrPhoneNumber: null
2) expected result(正確的結果): 輸入的資料為空
3) test program's result(程式執行後的結果): 輸入的資料為空
4) criteria analysis(測試目標的分析)  
Line coverage:   測試案例涵蓋的 Lines:  1, 2    
 
程式碼:
@Test
	public void test2() {
		String strPhoneNumber = "1123";
		String [] strArrPhoneNumber = strPhoneNumber.split("(?!^)");//轉array
		String msg = new LoopTesting6_phone().checkPhone(strArrPhoneNumber);
		System.out.println(msg);
		assertEquals(LoopTesting6_Common.ERR_LENGTH.getContent(), msg);
	}
test case 2 (測試案例 2)
1) Input values(測試時候需要控制資料的值): strArrPhoneNumber: 1123
2) expected result(正確的結果): 長度錯誤
3) test program's result(程式執行後的結果): 長度錯誤
4) criteria analysis(測試目標的分析) 
Line coverage:   測試案例涵蓋的 Lines:  1, 3, 4

程式碼:
@Test
	public void test3() {// 第1碼不為0
		String strPhoneNumber = "1234567890";
		strPhoneNumber = strPhoneNumber.trim();
		String [] strArrPhoneNumber = strPhoneNumber.split("(?!^)");//轉array
		String msg = new LoopTesting6_phone().checkPhone(strArrPhoneNumber);
		System.out.println(msg);
		assertEquals(LoopTesting6_Common.ERR_FORMAT.getContent(), msg);
	}
test case 3 (測試案例 3)
1) Input values(測試時候需要控制資料的值): strArrPhoneNumber: 1234567890
2) expected result(正確的結果): 格式錯誤
3) test program's result(程式執行後的結果): 格式錯誤
4) criteria analysis(測試目標的分析) 
Line coverage:   測試案例涵蓋的 Lines:  1, 3, 5, 6, 7, 8, 9

程式碼:
@Test
	public void test4() {// 第2碼不為9
		String strPhoneNumber = "0112345678";
		String [] strArrPhoneNumber = strPhoneNumber.split("(?!^)");//轉array
		String msg = new LoopTesting6_phone().checkPhone(strArrPhoneNumber);
		System.out.println(msg);
		assertEquals(LoopTesting6_Common.ERR_FORMAT.getContent(), msg);
	}
test case 4 (測試案例 4)
1) Input values(測試時候需要控制資料的值): strArrPhoneNumber: 0112345678
2) expected result(正確的結果): 輸入正確
3) test program's result(程式執行後的結果): 格式錯誤
4) criteria analysis(測試目標的分析) 
Line coverage:   測試案例涵蓋的 Lines:  1, 3, 5, 6, 7, 10, 11

程式碼:
@Test
	public void test5() {
		String strPhoneNumber = "09@@123456";
		String [] strArrPhoneNumber = strPhoneNumber.split("(?!^)");//轉array
		String msg = new LoopTesting6_phone().checkPhone(strArrPhoneNumber);
		System.out.println(msg);
		assertEquals(LoopTesting6_Common.ERR_FORMAT.getContent(), msg);
	}
test case 5 (測試案例 5)
1) Input values(測試時候需要控制資料的值): strArrPhoneNumber: 09@@123456
2) expected result(正確的結果): 格式錯誤
3) test program's result(程式執行後的結果): 格式錯誤
4) criteria analysis(測試目標的分析) 
Line coverage:   測試案例涵蓋的 Lines:  1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 15 

程式碼:
@Test
	public void test6() {//OK
		String strPhoneNumber = "0912345678";
		String [] strArrPhoneNumber = strPhoneNumber.split("(?!^)");//轉array
		String msg = new LoopTesting6_phone().checkPhone(strArrPhoneNumber);
		System.out.println(msg);
		assertEquals(LoopTesting6_Common.OK.getContent(), msg);
	}
test case 6 (測試案例 6)
1) Input values(測試時候需要控制資料的值): strArrPhoneNumber: 0912345678
2) expected result(正確的結果): 格式錯誤
3) test program's result(程式執行後的結果): 輸入正確
4) criteria analysis(測試目標的分析) 
Line coverage:   測試案例涵蓋的 Lines:  1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17

案例總共涵蓋總共 Lines: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
Line coverage: 100%
